<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>My Blog • Posts by &#34;小工具&#34; category</title>
        <link>https://zichun808.github.io</link>
        <description>一位熱衷於資訊領域的學生</description>
        <language>zh-TW</language>
        <pubDate>Tue, 19 Nov 2024 23:44:04 +0800</pubDate>
        <lastBuildDate>Tue, 19 Nov 2024 23:44:04 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://zichun808.github.io/tools/words/</guid>
            <title>字數計算</title>
            <link>https://zichun808.github.io/tools/words/</link>
            <pubDate>Tue, 19 Nov 2024 23:44:04 +0800</pubDate>
            <description><![CDATA[ 
&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;zh-TW&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;style&gt;
        textarea {
            width: 100%;
            min-height: 150px;
            padding: 10px;
            font-size: 16px;
            border-radius: 4px;
            border: 1px solid #ccc;
            resize: vertical; /* 限定垂直調整 */
            box-sizing: border-box;
            transition: background-color 0.3s, color 0.3s, box-shadow 0.3s; 
        }
        /* 淺色模式 */
        body {
            background-color: #f9f9f9;
            color: #333;
        }

        textarea {
            background-color: #fff;
            color: #333;
            border: 1px solid #ccc;
        }

        /* 深色模式 */
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #1e1e1e;
                color: #e0e0e0;
            }

            textarea {
                background-color: #333333;
                color: #e0e0e0;
                border: 1px solid #444;
            }
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;div class=&#34;container&#34;&gt;
    &lt;textarea id=&#34;textInput&#34; placeholder=&#34;請輸入內容...&#34; oninput=&#34;analyzeText()&#34;&gt;&lt;/textarea&gt;
    
    &lt;div class=&#34;result&#34;&gt;
        &lt;div class=&#34;group&#34;&gt;
            &lt;span&gt;文章字數: &lt;/span&gt;&lt;span id=&#34;charCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;總字元數: &lt;/span&gt;&lt;span id=&#34;weightedCharCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;group&#34;&gt;
            &lt;span&gt;文字段落: &lt;/span&gt;&lt;span id=&#34;lineCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;總單字數: &lt;/span&gt;&lt;span id=&#34;englishWordCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;group&#34;&gt;
            &lt;span&gt;中文字數: &lt;/span&gt;&lt;span id=&#34;chineseCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;英文字數: &lt;/span&gt;&lt;span id=&#34;englishCharCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;標點符號: &lt;/span&gt;&lt;span id=&#34;punctCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=&#34;group&#34;&gt;
            &lt;span&gt;空格數量: &lt;/span&gt;&lt;span id=&#34;spaceCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;數字數量: &lt;/span&gt;&lt;span id=&#34;numberCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt; | 
            &lt;span&gt;Emoji🙂: &lt;/span&gt;&lt;span id=&#34;emojiCount&#34; class=&#34;value&#34;&gt;0&lt;/span&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;script&gt;
    function analyzeText() {
        const text = document.getElementById(&#39;textInput&#39;).value;

        const lineCount = text.split(/\r?\n/).filter(line =&gt; line.trim().length &gt; 0).length;
        const chineseCount = (text.match(/[\u4e00-\u9fff]/g) || []).length;
        const englishWordCount = (text.match(/[a-zA-Z]+(?:[-&#39;][a-zA-Z]+)*/g) || []).length;
        const englishCharCount = (text.match(/[a-zA-Z]/g) || []).length;
        const numberCount = (text.match(/\d/g) || []).length;
        const emojiMatches = (text.match(/[\uD83C-\uDBFF\uDC00-\uDFFF]/g) || []);
        const emojiCount = Math.floor(emojiMatches.length / 2);
        const punctCount = (text.match(/[^\w\s\u4e00-\u9fff\d]/g) || []).filter(char =&gt; !/[\uD83C-\uDBFF\uDC00-\uDFFF]/.test(char)).length;
        const spaceCount = (text.match(/\s/g) || []).length;

        const totalCharCount = chineseCount + englishCharCount + numberCount + punctCount + emojiCount + spaceCount;
        const weightedCharCount = (chineseCount * 3) + (englishCharCount * 1) + (numberCount * 1) + (punctCount * 1) + (emojiCount * 2) + (spaceCount * 1);

        document.getElementById(&#39;charCount&#39;).textContent = formatNumber(totalCharCount);
        document.getElementById(&#39;weightedCharCount&#39;).textContent = formatNumber(weightedCharCount);
        document.getElementById(&#39;lineCount&#39;).textContent = formatNumber(lineCount);
        document.getElementById(&#39;englishWordCount&#39;).textContent = formatNumber(englishWordCount);
        document.getElementById(&#39;chineseCount&#39;).textContent = formatNumber(chineseCount);
        document.getElementById(&#39;englishCharCount&#39;).textContent = formatNumber(englishCharCount);
        document.getElementById(&#39;punctCount&#39;).textContent = formatNumber(punctCount);
        document.getElementById(&#39;emojiCount&#39;).textContent = formatNumber(emojiCount);
        document.getElementById(&#39;numberCount&#39;).textContent = formatNumber(numberCount);
        document.getElementById(&#39;spaceCount&#39;).textContent = formatNumber(spaceCount);
    }

    function formatNumber(num) {
        if (num &lt; 1000) {
            return num.toString().padStart(4, &#39;⠀&#39;); 
        }
        return num;
    }
    window.onload = analyzeText;
&lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;


 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://zichun808.github.io/tools/calculator/</guid>
            <title>學期成績計算</title>
            <link>https://zichun808.github.io/tools/calculator/</link>
            <pubDate>Sat, 12 Oct 2024 12:10:55 +0800</pubDate>
            <description><![CDATA[ 
&lt;!DOCTYPE html&gt;
&lt;html lang=&#34;zh-TW&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;meta name=&#34;viewport&#34; content=&#34;width=device-width, initial-scale=1.0&#34;&gt;
    &lt;style&gt;
        input, button {
            font-family: Arial, sans-serif; 
            padding: 12px;
            margin-bottom: 20px;
            border-radius: 6px; 
            width: 100%;
            font-size: 16px;
            box-sizing: border-box;
            transition: background-color 0.3s, color 0.3s, box-shadow 0.3s; 
        }
    
        input::placeholder {
            color: #888; 
        }
    
        /* 淺色模式 */
        body {
            background-color: #f9f9f9; /* 淺灰背景 */
            color: #333; /* 深色文字 */
        }
    
        input {
            background-color: #fff; /* 白色輸入框 */
            color: #333; /* 深色文字 */
            border: 1px solid #ccc; /* 淺色邊框 */
        }
    
        button {
            background-color: #888; /* 灰色按鈕 */
            color: white;
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
        }
    
        button:hover {
            background-color: #818181; 
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); 
            cursor: pointer;
        }
    
        /* 系統深色模式 */
        @media (prefers-color-scheme: dark) {
            body {
                background-color: #1e1e1e; /* 深灰背景 */
                color: #e0e0e0;
            }
            input {
                background-color: #333333; /* 深灰色輸入框 */
                color: #e0e0e0;
                border: 1px solid #444;
            }
            button {
                background-color: #555; /* 灰色按鈕 */
                color: white;
                border: none;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                cursor: pointer;
            }
            button:hover {
                background-color: #777; 
                box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); 
                cursor: pointer;
            }
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;form id=&#34;score-form&#34;&gt;
        &lt;label for=&#34;score1&#34;&gt;第一次段考成績:&lt;/label&gt;
        &lt;input type=&#34;number&#34; id=&#34;score1&#34; name=&#34;score1&#34; placeholder=&#34;必填&#34; min=&#34;0&#34; max=&#34;100&#34; required&gt;

        &lt;label for=&#34;score2&#34;&gt;第二次段考成績:&lt;/label&gt;
        &lt;input type=&#34;number&#34; id=&#34;score2&#34; name=&#34;score2&#34; placeholder=&#34;必填&#34; min=&#34;0&#34; max=&#34;100&#34; required&gt;

        &lt;label for=&#34;score3&#34;&gt;第三次段考成績:&lt;/label&gt;
        &lt;input type=&#34;number&#34; id=&#34;score3&#34; name=&#34;score3&#34; placeholder=&#34;選填&#34; min=&#34;0&#34; max=&#34;100&#34;&gt;

        &lt;label for=&#34;score4&#34;&gt;平時成績:&lt;/label&gt;
        &lt;input type=&#34;number&#34; id=&#34;score4&#34; name=&#34;score4&#34; placeholder=&#34;選填&#34; min=&#34;0&#34; max=&#34;100&#34;&gt;

        &lt;label for=&#34;previous_score&#34;&gt;上學期成績:&lt;/label&gt;
        &lt;input type=&#34;number&#34; id=&#34;previous_score&#34; name=&#34;previous_score&#34; placeholder=&#34;選填&#34; min=&#34;0&#34; max=&#34;100&#34;&gt;

        &lt;button type=&#34;submit&#34;&gt;計算&lt;/button&gt;
    &lt;/form&gt;

    &lt;h2&gt;計算結果&lt;/h2&gt;
    &lt;p id=&#34;result&#34;&gt;計算結果僅供參考，祝段考順利！&lt;/p&gt;

    &lt;script&gt;
        document.getElementById(&#39;score-form&#39;).addEventListener(&#39;submit&#39;, function(event) {
            event.preventDefault();

            const getInputValue = (id) =&gt; parseFloat(document.getElementById(id).value);
            const roundToOneDecimal = (num) =&gt; parseFloat(num.toFixed(1));

            const score1 = getInputValue(&#39;score1&#39;);
            const score2 = getInputValue(&#39;score2&#39;);
            const score3 = getInputValue(&#39;score3&#39;);
            const score4 = getInputValue(&#39;score4&#39;);
            const previousScore = getInputValue(&#39;previous_score&#39;);

            const weightedScore1 = roundToOneDecimal(score1 * 0.2);
            const weightedScore2 = roundToOneDecimal(score2 * 0.2);
            const weightedScore3 = isNaN(score3) ? 0 : roundToOneDecimal(score3 * 0.3);
            const weightedScore4 = isNaN(score4) ? 0 : roundToOneDecimal(score4 * 0.3);
            const totalScore = roundToOneDecimal(weightedScore1 + weightedScore2 + weightedScore3 + weightedScore4);

            let responseMessage = &#34;&#34;;

            const calculateRequiredScore = (currentTotal, weight) =&gt; roundToOneDecimal((59.5 - currentTotal) / weight);
            const calculateRequiredBothSemesters = (currentTotal, weight) =&gt; roundToOneDecimal((120 - previousScore - currentTotal) / weight);

            if (isNaN(score3) &amp;&amp; isNaN(score4) &amp;&amp; isNaN(previousScore)) {
                responseMessage = `總分(三段+平時)至少為 ${calculateRequiredScore(weightedScore1 + weightedScore2, 0.6)*2} 分。`;
            } else if (!isNaN(score3) &amp;&amp; isNaN(score4) &amp;&amp; isNaN(previousScore)) {
                const requiredScore4 = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                responseMessage = `平時成績至少為 ${requiredScore4} 分。`;
            } else if (isNaN(score3) &amp;&amp; !isNaN(score4) &amp;&amp; isNaN(previousScore)) {
                const requiredScore3 = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                responseMessage = `第三次段考至少為 ${requiredScore3} 分。`;
            } else if (isNaN(score3) &amp;&amp; isNaN(score4) &amp;&amp; !isNaN(previousScore)) {
                const requiredScoreThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2, 0.6);
                const requiredScoreBothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2, 0.6);
                responseMessage = `本學期要通過總分至少為 ${requiredScoreThisSemester*2} 分。\n兩學期皆通過總分至少為 ${requiredScoreBothSemesters*2} 分。`;
            } else if (!isNaN(score3) &amp;&amp; !isNaN(score4) &amp;&amp; isNaN(previousScore)) {
                responseMessage = totalScore &gt;= 59.5 ? `恭喜本學期通過\n(本學期成績 ${totalScore} 分)` : `本學期未通過\n(本學期成績 ${totalScore} 分)`;
            } else if (!isNaN(score3) &amp;&amp; isNaN(score4) &amp;&amp; !isNaN(previousScore)) {
                const requiredScore4ThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                const requiredScore4BothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                responseMessage = `本學期要通過，平時成績至少為 ${requiredScore4ThisSemester} 分。\n兩學期皆通過，平時成績至少為 ${requiredScore4BothSemesters} 分。`;
            } else if (isNaN(score3) &amp;&amp; !isNaN(score4) &amp;&amp; !isNaN(previousScore)) {
                const requiredScore3ThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                const requiredScore3BothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                responseMessage = `本學期要通過，第三次段考至少為 ${requiredScore3ThisSemester} 分。\n兩學期皆通過，第三次段考至少為 ${requiredScore3BothSemesters} 分。`;
            } else if (!isNaN(score3) &amp;&amp; !isNaN(score4) &amp;&amp; !isNaN(previousScore)) {
                if ((totalScore + previousScore) &gt;= 119.5) {
                    responseMessage = `恭喜兩學期皆通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else if (totalScore &gt;= 59.5) {
                    responseMessage = `僅有本學期通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else if (previousScore &gt;= 60) {
                    responseMessage = `僅有上學期通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else {
                    responseMessage = `本學期及上學期皆未通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                }
            }
            document.getElementById(&#39;result&#39;).innerText = responseMessage;
        });
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;

&lt;details&gt;&lt;summary&gt;成績計算方式及說明&lt;/summary&gt;&lt;div&gt;
&lt;h1 id=&#34;成績計算方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#成績計算方式&#34;&gt;#&lt;/a&gt; 成績計算方式&lt;/h1&gt;
&lt;h3 id=&#34;學期成績計算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#學期成績計算&#34;&gt;#&lt;/a&gt; 學期成績計算&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;第一、二次段考：各佔 20%&lt;/li&gt;
&lt;li&gt;三段、平時成績：各佔 30%&lt;/li&gt;
&lt;li&gt;&lt;ins&gt;學期成績採四捨五入至整數位&lt;/ins&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;學年成績計算&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#學年成績計算&#34;&gt;#&lt;/a&gt; 學年成績計算&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;上、下學期成績：各佔 50%&lt;/li&gt;
&lt;li&gt;&lt;ins&gt;學年成績採四捨五入至十分位&lt;/ins&gt;&lt;br&gt;
&lt;/br&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;輸出內容說明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#輸出內容說明&#34;&gt;#&lt;/a&gt; 輸出內容說明&lt;/h1&gt;
&lt;h3 id=&#34;若僅輸入第一-二次段考成績&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#若僅輸入第一-二次段考成績&#34;&gt;#&lt;/a&gt; 若僅輸入第一、二次段考成績&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;若無上學期成績：輸出本學期通過 第三次段考和平時成績 最低所需的分數。&lt;/li&gt;
&lt;li&gt;若有上學期成績：額外輸出兩學期皆通過 第三次段考和平時成績 最低所需的分數。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;若輸入兩次段考成績及三段或平時成績其中一項&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#若輸入兩次段考成績及三段或平時成績其中一項&#34;&gt;#&lt;/a&gt; 若輸入兩次段考成績及三段或平時成績其中一項&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;若無上學期成績：輸出本學期通過 另一項 最低所需的分數。&lt;/li&gt;
&lt;li&gt;若有上學期成績：額外輸出兩學期皆通過 另一項 最低所需的分數。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;若輸入所有成績&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#若輸入所有成績&#34;&gt;#&lt;/a&gt; 若輸入所有成績&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;若無上學期成績：輸出本學期是否通過。&lt;/li&gt;
&lt;li&gt;若有上學期成績：輸出兩學期通過情況。&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/details&gt;
 ]]></description>
        </item>
    </channel>
</rss>
